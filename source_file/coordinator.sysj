Coordinator
(
    input signal c2s_signal_capper_register;
    output signal s2c_signal_capper_register_done;
    input signal c2s_signal_capper_idle;
    output signal s2c_signal_capper_move2next;
    output signal s2c_signal_capper_do_process;

    input signal c2s_signal_filler_register;
    output signal s2c_signal_filler_register_done;
    input signal c2s_signal_filler_idle;
    output signal s2c_signal_filler_move2next;
    output signal s2c_signal_filler_do_process;

    input signal c2s_signal_rotater_register;
    output signal s2c_signal_rotater_register_done;
    input signal c2s_signal_rotater_idle;
    output signal s2c_signal_rotater_move2next;

    input signal c2s_signal_conveyer_register;
    output signal s2c_signal_conveyer_register_done;
    input signal c2s_signal_conveyer_idle;
    output signal s2c_signal_conveyer_move2next;

    input signal c2s_signal_conveyer_finished;
    input signal c2s_signal_rotater_finished;

    input String signal input_signal_from_cloud;
    output String signal output_signal_to_cloud;

    output String signal s2c_signal_filler_order;
)->{

    signal Sync;
    signal modelConveyer;
    signal modelFiller;
    signal modelRotater;
    signal modelCapper;

    {
        int status = Coordinator_State.INITIAL;
        int controller_amount = 4;

        loop
        {
            switch (status)
            {
                case Coordinator_State.INITIAL:
                    //update controller_list
                    if (controller_amount == ControllerHandler.getInstance().controller_list.GetListSize())
                    {
                        status = Coordinator_State.DO_PROCESS;
                        System.out.println("Coordinator current status " + status);
                    }

                    break;

                case Coordinator_State.DO_PROCESS:
                    //wait move finished
                    //await();

                    await(c2s_signal_rotater_finished);

                    emit s2c_signal_filler_do_process;
                    emit s2c_signal_capper_do_process;

                    status = Coordinator_State.WAITING_FOR_IDLE;
                    System.out.println("Coordinator current status " + status);
                    break;

                case Coordinator_State.WAITING_FOR_IDLE:
                    //check status

                    //await (Sync);
                    if (true == ControllerHandler.getInstance().controller_list.CheckAllIdleState())
                    {
                        status = Coordinator_State.SENDING_MOVE_COMMAND;
                        System.out.println("Coordinator current status " + status);
                    }

                    break;
                case Coordinator_State.SENDING_MOVE_COMMAND:
                    //4

                    //TODO: should be save in a list
                    emit s2c_signal_filler_move2next;
                    emit s2c_signal_capper_move2next;
                    emit s2c_signal_rotater_move2next;
                    emit s2c_signal_conveyer_move2next;

                    //waiting controller_list --;
                    //queue++
                    if (null != ControllerHandler.getInstance().bottle_queue.dequeue())
                    {
                        String str = ControllerHandler.getInstance().waiting_list.PopBottle().ToJsonString();
                        emit output_signal_to_cloud(str);
                        System.out.println(str);
                    }

                    ControllerHandler.getInstance().bottle_queue.enqueue(ControllerHandler.getInstance().waiting_list.PopBottle());


                    ControllerHandler.getInstance().controller_list.ResetAllIdleState();

                    if (ControllerHandler.getInstance().bottle_queue.isEmpty() && ControllerHandler.getInstance().waiting_list.IsEmpty())
                    {
                        status = Coordinator_State.WAITING_FOR_ORDER;
                        System.out.println("Coordinator current status " + status);
                    }
                    else
                    {
                        status = Coordinator_State.DO_PROCESS;
                        System.out.println("Coordinator current status " + status);
                    }
                    break;

                case Coordinator_State.WAITING_FOR_ORDER:

                    if (!ControllerHandler.getInstance().waiting_list.IsEmpty())
                    {
                        status = Coordinator_State.DO_PROCESS;
                        System.out.println("Coordinator current status " + status);
                    }
                    break;

                default:
                    break;
            }
            pause;
        }
    }
    ||
    {
        String module = new String("capper");
        System.out.println("Coordinator waiting for controller " + module);

        loop
        {
            //capper thread
            await(c2s_signal_capper_register);
            for (int i = 0; i < 20; ++i)
            {
                emit s2c_signal_capper_register_done;
                pause;
            }
            System.out.println("Coordinator emit s2c_signal_capper_register_done");
            ControllerHandler.getInstance().controller_list.AddController(module);

            ControllerHandler.getInstance().controller_list.SetSpecificStateForbidden(module);
            loop
            {
                await(c2s_signal_capper_idle);
                emit modelCapper;
                ControllerHandler.getInstance().controller_list.SetSpecificState(module);
                //System.out.println("Coordinator get idle from " + module);
                pause;
            }
            pause;
        }
    }
    ||
    {
        String module = new String("filler");
        System.out.println("Coordinator waiting for controller " + module);

        loop
        {
            //filler thread
            await(c2s_signal_filler_register);
            for (int i = 0; i < 20; ++i)
            {
                emit s2c_signal_filler_register_done;
                pause;
            }
            System.out.println("Coordinator emit s2c_signal_filler_register_done");
            ControllerHandler.getInstance().controller_list.AddController(module);

            loop
            {
                await(c2s_signal_filler_idle);
                emit modelFiller;
                ControllerHandler.getInstance().controller_list.SetSpecificState(module);
                //System.out.println("Coordinator get idle from " + module);
                pause;
            }
            pause;
        }
    }
    ||
    {
        String module = new String("rotater");
        System.out.println("Coordinator waiting for controller " + module);
        
        loop
        {
            //rotater thread
            await(c2s_signal_rotater_register);
            for (int i = 0; i < 20; ++i)
            {
                emit s2c_signal_rotater_register_done;
                pause;
            }

            System.out.println("Coordinator emit s2c_signal_rotater_register_done");
            ControllerHandler.getInstance().controller_list.AddController(module);

            ControllerHandler.getInstance().controller_list.SetSpecificStateForbidden(module);
            loop
            {
                await(c2s_signal_rotater_idle);
                emit modelRotater;
                ControllerHandler.getInstance().controller_list.SetSpecificState(module);
                //System.out.println("Coordinator get idle from " + module);
                pause;
            }
            pause;
        }
    }
    ||
    {
        String module = new String("conveyer");
        System.out.println("Coordinator waiting for controller " + module);

        loop
        {
            //conveyer thread
            await(c2s_signal_conveyer_register);
            for (int i = 0; i < 20; ++i)
            {
                emit s2c_signal_conveyer_register_done;
                pause;
            }

            System.out.println("Coordinator emit s2c_signal_conveyer_register_done");

            ControllerHandler.getInstance().controller_list.AddController(module);

            ControllerHandler.getInstance().controller_list.SetSpecificStateForbidden(module);
            loop
            {
                await(c2s_signal_conveyer_idle);
                ControllerHandler.getInstance().controller_list.SetSpecificState(module);
                //System.out.println("Coordinator get idle from " + module);
                pause;
            }
            pause;
        }
    }
    ||
    {
        //send & receive message
        loop
        {
            await(input_signal_from_cloud);
            //relay signal

            waitl(300ms);

            System.out.println("Coordinator get message from cloud " + (String)#input_signal_from_cloud);
            emit s2c_signal_filler_order((String)#input_signal_from_cloud);

            ControllerHandler.getInstance().waiting_list.AppendListWithJson((String)#input_signal_from_cloud);

            pause;
        }
    }
   ||
    {
        int count = 0;
        loop
        {
            present(modelCapper)
            {
                //count |= 4;
            }
            else
            {}

            present(modelFiller)
            {
                count |= 2;
            }
            else
            {}

            if (count == 2)
            {
                emit Sync;
                count = 0;
            }
            pause;
        }
    }
}
