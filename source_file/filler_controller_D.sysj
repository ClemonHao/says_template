FillerD
(
    input String signal m2c_signal_liquid_D;
    output signal c2m_signal_liquid_D;
    output signal c2m_signal_filler_D_idle;
    output boolean signal c2m_signal_filler_D_no_bottle;
    input signal c2m_signal_filler_D_check_and_start;

	input signal bottleAtPos2D, bottleAtPos2DFull, dosUnitDEvac, dosUnitDAtTarget;
	output signal valveInjectorDOnOff, valveInletDOnOff, dosUnitDValveRetract, dosUnitDValveExtend;
)->{

    signal openInjector, closeInjector;
    signal openInlet, closeInlet;

    {
        int status = Controller_State.INITIAL;

        loop
        {
            switch (status)
            {
                case Controller_State.INITIAL:
                    emit c2m_signal_liquid_D;
                    emit c2m_signal_liquid_D;
                    emit c2m_signal_liquid_D;

                    await(c2m_signal_filler_D_check_and_start);
                    status = Controller_State.CHECK_BOTTLE;
                    System.out.println("Filler D current status " + status);

                    break;

                case Controller_State.CHECK_BOTTLE:
                    //not bottle here

                    present (bottleAtPos2D)
                    {
                        emit c2m_signal_filler_D_no_bottle(false);
                        status = Controller_State.DO_PROCESS;
                        System.out.println("Filler D current status " + status);
                    }
                    else
                    {
                        emit c2m_signal_filler_D_no_bottle(true);
                    }
                    break;

                case Controller_State.DO_PROCESS:
                    System.out.println("filler D do process");
                    //check queue.GetCurrentIngredient();

                    emit openInjector;

                    System.out.println("Filler D emit openInletor");
                    pause;

                    present (dosUnitDEvac)
                    {
                        System.out.println("Filler D get dosUnitAEvac");
                        abort (dosUnitDAtTarget) { sustain dosUnitDValveRetract;}
                    }
                    else
                    {}

                    emit closeInjector;
                    System.out.println("Filler D get emit closeInjector");
                    pause;

                    emit openInlet;

                    pause;

                    abort (dosUnitDEvac || bottleAtPos2DFull) { sustain dosUnitDValveExtend; }

                    present (bottleAtPos2DFull)
                    {
                        emit closeInlet;
                        emit openInjector;
                        pause;

                        abort (dosUnitDEvac) { sustain dosUnitDValveExtend; }
                    }
                    else
                    {}

                    emit closeInlet;
                    System.out.println("Filler D get emit closeInlet");

                    FillerHandler.getInstance().liquid_queue_D.PopOneBottle();
                    status = Controller_State.IDLE;
                    System.out.println("Filler D current status " + status);
                    break;

                case Controller_State.IDLE:
                    emit c2m_signal_filler_D_idle;
                    emit c2m_signal_filler_D_idle;
                    emit c2m_signal_filler_D_idle;
                    await(c2m_signal_filler_D_check_and_start);

                    status = Controller_State.CHECK_BOTTLE;
                    System.out.println("Filler D current status " + status);
                    break;

                default:
                    break;
            }
            pause;
        }
    }
    ||
    {
        loop
        {
            await(m2c_signal_liquid_D);
            //upate ingredient list
            String tmpstr = (String)#m2c_signal_liquid_D;

            System.out.println("Filler D get " + tmpstr);
            FillerHandler.getInstance().liquid_queue_D.PushOneQueue(tmpstr);
            pause;
        }
    }
    ||
    {
        loop
        {
            await (openInjector);

            abort (closeInjector) { sustain valveInjectorDOnOff; }

            pause;
        }
    }
    ||
    {
        loop
        {
            await (openInlet);

            abort (closeInlet) { sustain valveInletDOnOff; }

            pause;
        }
    }
}
