ControllerCapper
(
    input signal s2c_signal_capper_register_done;
    output signal c2s_signal_capper_register;
    input signal s2c_signal_capper_move2next;
    input signal s2c_signal_capper_do_process;
    output signal c2s_signal_capper_idle;

	input signal bottleAtPos4, gripperZAxisLowered, gripperZAxisLifted, gripperTurnHomePos, gripperTurnFinalPos;
	output signal cylPos5ZaxisExtend, gripperTurnRetract, gripperTurnExtend, capGripperPos5Extend, cylClampBottleExtend;
)->{

    signal clampBottle, unclampBottle;
    signal raiseGripper, lowerGripper;
    signal gripCap, releaseCap;

    {
        int status = Controller_State.INITIAL;

        loop
        {
            switch (status)
            {
                case Controller_State.INITIAL:
                    emit c2s_signal_capper_register;
                    present (s2c_signal_capper_register_done)
                    {
                        status = Controller_State.PREPARE_FOR_PROCESS;
                        System.out.println("Controller current status " + status);
                    }
                    else
                    {}

                    break;
                case Controller_State.PREPARE_FOR_PROCESS:
                    //check sensors here
                    await (s2c_signal_capper_do_process);

                    status = Controller_State.CHECK_BOTTLE;
                    System.out.println("Controller current status " + status);
                    break;

                case Controller_State.CHECK_BOTTLE:
                    //not bottle here

                    present (bottleAtPos4)
                    {
                        status = Controller_State.DO_PROCESS;
                        System.out.println("Controller current status " + status);
                    }
                    else
                    {
                        status = Controller_State.IDLE;
                        System.out.println("Controller current status " + status);
                    }
                    break;

                case Controller_State.DO_PROCESS:
                    //TODO do process here
                    System.out.println("capper do process");

                    emit clampBottle;
                    emit lowerGripper;

                    await (gripperZAxisLowered);

                    emit gripCap;

                    abort (gripperTurnFinalPos) { sustain gripperTurnExtend; }

                    emit releaseCap;

                    abort (gripperTurnHomePos) { sustain gripperTurnRetract; }

                    emit raiseGripper;

                    await (gripperZAxisLifted);

                    emit unclampBottle;

                    status = Controller_State.IDLE;
                    System.out.println("Controller current status " + status);
                    break;

                case Controller_State.IDLE:
                    emit c2s_signal_capper_idle;
                    //waiting for signal "move2NextPos"

                    await(s2c_signal_capper_move2next);
                    status = Controller_State.PREPARE_FOR_PROCESS;
                    System.out.println("Controller current status " + status);
                    break;

                default:
                    break;
            }
            pause;
        }
    }
    ||
    {
        loop
        {
            await (clampBottle);
            abort (unclampBottle) { sustain cylClampBottleExtend; }
            pause;
        }
    }
    ||
    {
        loop
        {
            await (lowerGripper);
            abort (raiseGripper) { sustain cylPos5ZaxisExtend; }
            pause;
        }
    }
    ||
    {
        loop
        {
            await (gripCap);
            abort (releaseCap) { sustain capGripperPos5Extend; }
            pause;
        }
    }

}
